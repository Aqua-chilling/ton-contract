;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 queryId:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'queryId, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $TokenTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int queryId, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (queryId, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: ClaimEvent
;; Header: 0x0f2a7e05
;; TLB: claim_event#0f2a7e05 claimId:uint256 amount:coins = ClaimEvent
;;

builder $ClaimEvent$_store(builder build_0, (int, int) v) inline {
    var (v'claimId, v'amount) = v;
    build_0 = store_uint(build_0, 254443013, 32);
    build_0 = build_0.store_uint(v'claimId, 256);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $ClaimEvent$_store_cell((int, int) v) inline {
    return $ClaimEvent$_store(begin_cell(), v).end_cell();
}

((int, int)) $ClaimEvent$_constructor_claimId_amount(int claimId, int amount) inline {
    return (claimId, amount);
}

;;
;; Type: ClaimInfo
;; Header: 0xab35b679
;; TLB: claim_info#ab35b679 data:^slice signature:^slice = ClaimInfo
;;

(slice, ((slice, slice))) $ClaimInfo$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2872424057);
    var v'data = sc_0~load_ref().begin_parse();
    var v'signature = sc_0~load_ref().begin_parse();
    return (sc_0, (v'data, v'signature));
}

;;
;; Type: UpdateJetton
;; Header: 0x8bfebb71
;; TLB: update_jetton#8bfebb71 contract_jettonWallet:address = UpdateJetton
;;

(slice, ((slice))) $UpdateJetton$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2348727153);
    var v'contract_jettonWallet = sc_0~__tact_load_address();
    return (sc_0, (v'contract_jettonWallet));
}

;;
;; Type: ClaimContract
;;

builder $ClaimContract$_store(builder build_0, (slice, slice, int, int, cell) v) inline {
    var (v'contract_jettonWallet, v'owner, v'public_key, v'ENTERED, v'claimedIds) = v;
    build_0 = __tact_store_address_opt(build_0, v'contract_jettonWallet);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'public_key, 257);
    build_0 = build_0.store_int(v'ENTERED, 1);
    build_0 = build_0.store_dict(v'claimedIds);
    return build_0;
}

(slice, ((slice, slice, int, int, cell))) $ClaimContract$_load(slice sc_0) inline {
    var v'contract_jettonWallet = sc_0~__tact_load_address_opt();
    var v'owner = sc_0~__tact_load_address();
    var v'public_key = sc_0~load_int(257);
    var v'ENTERED = sc_0~load_int(1);
    var v'claimedIds = sc_0~load_dict();
    return (sc_0, (v'contract_jettonWallet, v'owner, v'public_key, v'ENTERED, v'claimedIds));
}

(slice, ((slice, int))) $ClaimContract$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'public_key = sc_0~load_int(257);
    return (sc_0, (v'owner, v'public_key));
}

(slice, slice, int, int, cell) $ClaimContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ClaimContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int public_key) = $sc~$ClaimContract$init$_load();
        $sc.end_parse();
        return $ClaimContract$_contract_init(owner, public_key);
    }
}

() $ClaimContract$_contract_store((slice, slice, int, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $ClaimContract$_store(b, v);
    set_data(b.end_cell());
}